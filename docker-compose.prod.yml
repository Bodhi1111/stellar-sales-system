# Production Docker Compose Configuration
version: '3.8'

services:
  app:
    image: ghcr.io/${GITHUB_REPOSITORY}:${IMAGE_TAG:-latest}
    container_name: stellar_sales_api
    restart: unless-stopped
    ports:
      - '8000:8000'
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/stellar_sales
      - QDRANT_URL=http://qdrant:6333
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - OLLAMA_URL=http://ollama:11434
      - BASEROW_URL=http://baserow:80
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started
    networks:
      - stellar_network

  postgres:
    image: postgres:15
    container_name: stellar_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stellar_sales
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stellar_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: stellar_qdrant
    restart: unless-stopped
    ports:
      - '6333:6333'
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - stellar_network

  neo4j:
    image: neo4j:5
    container_name: stellar_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - neo4j_data:/data
    networks:
      - stellar_network

  ollama:
    image: ollama/ollama
    container_name: stellar_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - stellar_network

  baserow:
    image: baserow/baserow:latest
    container_name: baserow
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - baserow_data:/baserow/data
    environment:
      - BASEROW_PUBLIC_URL=http://localhost:8080
    networks:
      - stellar_network

networks:
  stellar_network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_data:
  neo4j_data:
  ollama_data:
  baserow_data:
