from typing import TypedDict, List, Dict, Any, Optional
from pathlib import Path


class AgentState(TypedDict):
    """
    Represents the unified state for both the ingestion pipeline and the
    reasoning engine. It is designed for a gradual, backward-compatible
    migration to the new agentic architecture.

    Sprint 01: Intelligence First architecture with semantic memory
    Sprint 02: Reasoning Engine with cognitive nodes (Gatekeeper, Planner, Auditor, Router)
    """
    # --- Universal Fields ---
    file_path: Optional[Path]
    transcript_id: Optional[str]  # Changed from int to str to match header ID
    chunks: Optional[List[str]]

    # --- Ingestion & Legacy Fields (from Sprint 1) ---
    raw_text: Optional[str]
    structured_dialogue: Optional[List[Dict[str, Any]]]
    # RE-ADDED for compatibility
    conversation_phases: Optional[List[Dict[str, Any]]]
    # PRESERVED for backward compatibility
    extracted_data: Optional[Dict[str, Any]]
    crm_data: Optional[Dict[str, Any]]
    email_draft: Optional[str]
    social_content: Optional[Dict[str, Any]]
    coaching_feedback: Optional[Dict[str, Any]]
    db_save_status: Optional[Dict[str, Any]]  # RE-ADDED for compatibility
    historian_status: Optional[Dict[str, Any]]  # RE-ADDED for compatibility

    # --- Semantic NLP Fields (Intelligence First Enhancement) ---
    semantic_turns: Optional[List[Dict[str, Any]]]  # Per-turn intent/sentiment/discourse
    key_entities_nlp: Optional[Dict[str, Any]]  # Entities extracted by StructuringAgent NLP
    conversation_structure: Optional[Dict[str, Any]]  # Overall structure metrics

    # --- Reasoning Engine & "Intelligence First" Fields ---
    # User's original query for reasoning engine
    original_request: Optional[str]
    extracted_entities: Optional[Dict[str, Any]]  # From KnowledgeAnalystAgent
    plan: Optional[List[str]]  # Generated by PlannerAgent
    # Actions taken by RouterAgent
    intermediate_steps: Optional[List[Dict[str, Any]]]
    # Results from AuditorAgent
    verification_history: Optional[List[Dict[str, Any]]]
    # From GatekeeperAgent if request is ambiguous
    clarification_question: Optional[str]
    final_response: Optional[str]  # Final answer to user's request
